---
title: "Counter Strike 2"
subtitle: "A simple Analysis of E-sports Data"
author: "Alvaro Cervan"
subject: "Sports Data Analysis"
date: last-modified
title-block-banner: orange
title-block-banner-color: black
lightbox: true
toc: true
toc-location: left
toc-depth: 4
number-sections: true
number-sections-depth: 3
format:
  html:
    code-fold: true
    theme: 
        light: flatly
        dark: darkly
  pdf: default
jupyter: python3
---

# TODO

- [ ] Check Casual players clustering colors to match the text
- [ ] Add #| label: fig-polar and #| fig-cap: "A line plot on a polar axis" to all the plots

## Introduction

This is a simple analysis of Counter Strike 2 data. The data was obtained from [Kaggle](https://www.kaggle.com/). The data includes information about weapons, players, maps, professional players, and professional games.

::: {.callout-note}
In September 27, 2023 Counter Strike 2 (CS2) was released. The previous version, Counter Strike Global Offensive (CSGO), was released in August 21, 2012. They are essentially the same game, but CS2 has newer graphics and a few new features and improvements.
:::

### What is Counter Strike 2?

![Counter Strike 2 logo](resources/csgo%20logo.jpg)

<details>
<summary>Display information about the game</summary>

#### The Game 

Counter-Strike 2 is a first-person shooter video game developed by Valve Corporation. It is the fourth game in the Counter-Strike series. 
In 2012, with the release of Counter-Strike: Global Offensive, the game became hugely popular largely due to the **competitive mode** and the introduction of **skins (gambling related)**.

The game pits two teams against each other: the **Terrorist (T)** against the **Counter Terrorist (CT)**. Each team has 5 players, with a total of 10 players in a match. At the start, the teams are given the roles of T or CT. In the round 13 this roles are swapped.

#### The Rules

A competitive match of CS2 is played in a maximum of 24 **rounds of 2 minutes**. 

- **The winner:** First team to win 13 rounds wins the match.
- **Tie:** It is possible to end the match in a Tie if both teams reach 12 rounds.
- **Surrender:** If a team mate leaves of the match is very unequal and a team see that losing is unavoidable, they can vote to surrender to save time.

#### The Round

Each round is started in the same way. Both teams player's appear in their base, and have 15 seconds before they can move and start the round to prepare and choose their equipment.

To win a round there are 2 possible ways:

- Kill all (5) players on the other team.
- **Terrorists:** Plant the bomb and explode it.
- **Counter Terrorist:** Defuse the bomb after is set.

#### Map

Every map is designed in a similar way. The CT appear near the designated areas where the bomb must be planted. The T appears in the opposite end of the map. The maps then have different paths and features, but in general they have 3 main paths to reach the bomb site: A, B and Middle.

- **A:** The path that leads to bomb site "A".
- **B:** The path that leads to bomb site "B".
- **Middle:** The path that leads to the middle of the map. It is usually more dangerous and leads between the two bomb sites.

![Mirage Map with Callouts](resources/de_mirage-map-callouts.jpg){#fig-map}

#### Tournaments

The same way that in football there FIFA World Cup or the UEFA Champions League, in CS2, tournaments are a vital part of the competitive e-sports scene, featuring both online leagues and LAN (Local Area Network) events held across various regions like Europe, North America, South America, and the CIS. These tournaments showcase the top teams from around the world competing for significant prize pools, which typically range from $500,000 to $2 million, depending on the event.

The biggest CS2 tournaments are often the Majors, organized by Valve, considered the official world championships of the game. These events are held once or twice a year and feature the strongest teams from each region, making them the pinnacle of competitive CS2. These tournaments are also known for their high prize pools and the best teams competing for top honors.

Some of the most popular CS2 tournaments in recent years include:

- PGL Major – The Major is widely regarded as the most important event, drawing massive viewership and featuring intense competition.
- IEM Cologne – Known for its rich history in the CS series, this tournament is one of the most anticipated events each year.
- IEM Katowice – Another major international event with top-tier competition and a significant prize pool.
- ESL Pro League – A highly competitive league featuring a series of tournaments throughout the year.
- BLAST Premier – Known for its exciting format and high-quality production, it remains a fan favorite.

These events are critical to determining the global rankings of teams and contribute to the overall growth of the CS2 e-sports community.

The preferred competition format is the **best of 3** (Bo3), where the first team to win 2 maps wins the match, using Swiss System (16 teams minimum) or Double Elimination (8 teams minimum) formats.

</details>

### Why Counter Strike 2?

<details>

<summary> Why CS2 is different from other Esports </summary>

Counter Strike 2 might look simple on a first impression, but under the hood, it is a very complex game, with a huge amount of systems to keep in mind that can tilt the game in favour of the most prepared team.

#### Money

Money is a key element of CS2, as it is used to buy weapons, armor, and grenades. Managing money is crucial to winning the game, as it can give a team a significant advantage over the other team. The amount of money a team has will determine what weapons they can buy, and how many grenades they can afford.

At the beginning of each round, each team member is awarded an amount of money. The amount will differ depending on the outcome of the previous round. Furthermore, if a team wins a round, they will receive more money than the losing team, but to keep the game balanced, the losing team will receive a higher amount of money the more rounds they lose in a row.

Also, bonus money is awarded for completing objectives, such as planting the bomb, defusing the bomb, or killing the enemy team.

Killing an enemy player will also reward the player with money, but the amount will depend on the weapon used to kill the enemy.

#### Weapons

There are a variety of weapons in CS2, each with its own unique characteristics. Some weapons are more powerful than others, but they are also more expensive. The most powerful weapons are the AWP and the AK-47, but they are also the most expensive. The AWP is a one-shot kill weapon, while the AK-47 is a one-shot kill weapon to the head.

Generally, the weapons can be divided into three categories: 

| Category | Description                                                                 |
|----------|-----------------------------------------------------------------------------|
| Rifles   | Rifles are the most powerful weapons, but they are also the most expensive. |
| SMGs     | SMGs are less powerful than rifles, but they are also less expensive.       |
| Pistols  | Pistols are the least powerful weapons, but they are also the least expensive. |

::: {.callout-note}
As the CT team starts with the advantage of defending the bomb sites, they have more expensive weapons. The T team, on the other hand, has to attack the bomb sites, so they have cheaper weapons.
:::

#### Grenades and Armor

##### Armor
Armor is an essential part of CS2, as it can protect the player from damage. There are two types of armor in CS2:

| Armor  | Description                                      |
|--------|--------------------------------------------------|
| Kevlar | Protects the player from damage to the body. Raises armor to 100     |
| Helmet | Protects the player from damage to the head.      |

Armor can be bought at the beginning of each round, and it will protect the player from damage until it is depleted. Once the armor is depleted, the player will take full damage from any subsequent hits.

The helmet is an optional purchase after buying Kevlar. It is recommended to buy a helmet if the enemy team is using rifles, as it will protect the player from a one-shot kill to the head.

##### Grenades
Grenades are an essential part of CS2, as they can be used to control the map and force the enemy team to move. There are five types of grenades in CS2:

| Grenade              | Description                                             |
|----------------------|---------------------------------------------------------|
| Flashbang            | A grenade that blinds the enemy team.                   |
| Smoke                | A grenade that creates a smoke screen.                  |
| HE                   | A grenade that deals damage to the enemy team.          |
| Molotov / Incendiary | A grenade that creates a fire that deals damage to the enemy team. |
| Decoy                | A grenade that creates a fake gunfire sound.            |

#### Strategy

CS2 is a game of strategy and teamwork. A team that works together and communicates effectively will have a significant advantage over a team that does not. There are many strategies that can be used in CS2, such as:

| Strategy| Description|
|---|-----------------|
| Rushing                | A strategy where the team quickly moves to a bomb site to catch the enemy team off guard. |
| Splitting              | A strategy where the team splits up and attacks multiple bomb sites at once. |
| Holding                | A strategy where the team holds a position and waits for the enemy team to come to them. |
| Faking                 | A strategy where the team pretends to attack one bomb site, but then switches to another bomb site at the last minute. |
| Eco                    | A strategy where the team saves money by not buying weapons or armor, in order to buy more powerful weapons in future rounds. |
| Force Buy              | A strategy where the team buys weapons and armor even if they do not have enough money, in order to try and win the round. |
| Full Buy               | A strategy where the team buys the best weapons and armor they can afford, in order to have the best chance of winning the round. |
| Save                   | A strategy where the team saves their weapons and armor in order to use them in future rounds. |
| Retake                 | A strategy where the team waits for the enemy team to plant the bomb, and then tries to retake the bomb site. |
| Default                | A strategy where the team spreads out across the map and waits for the enemy team to make a move. |


#### Roles

::: {.callout-note}
This roles are not enforced, but they are a good way to understand the game and the different ways to play it. Even non professional players tend to follow this roles.
:::

In CS2, each player has a specific role to play. There are five main roles in CS2:

- **Entry Fragger:** The player who goes in first and tries to get the first kill.
- **Lurker:** The player who stays behind and tries to catch the enemy team off guard.
- **AWPer:** The player who uses the AWP sniper rifle to get kills from long range.
- **Support:** The player who helps the team by throwing grenades and providing cover fire.
- **In-Game Leader:** The player who calls the shots and makes the decisions for the team.

This roles are chosed individually by each player depending on their own skills and how they play best, and it is important for the team to work together and communicate effectively in order to win the game.

#### Randomness

CS2 is a game of skill, but there is also an element of randomness to it. The outcome of a round can be influenced by many factors, such as the weapons used, the map, the strategy, and the luck of the players. This randomness is what makes CS2 so exciting to watch and play, as it keeps the game fresh and unpredictable.

Each round is virtually unique, completely different from the previous one, and the outcome is never certain. The tide of the game can turn in an instant, and a team that is losing can quickly turn the game around and win the match.

No player faces the same situation twice, and each round is a new challenge that requires quick thinking, fast reflexes, and teamwork to overcome.

#### Final Thoughts

Adding the economic system, the weapons, the grenades, the armor, the maps, the strategies, the roles, and the randomness, CS2 is a complex game that requires a lot of skill and practice to master, but it is also a game that is incredibly rewarding and fun to play.

The final touch is the competitive mode, where players can play against other players of similar skill level, and climb the ranks to become the best player in the world. This mode is what makes CS2 so popular, as it gives players a sense of accomplishment and progression, and keeps them coming back for more.
While in other modes or other games, the player can play for fun but there is no real objective, in competitive mode the player has a goal, to win and climb the ranks, and this is what makes CS2 so addictive and engaging.

</details>


## Data 

```{python libraries}
# loading libraries to read csv files
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
from plotly.subplots import make_subplots
from itables import show, options as opt
#opt.maxBytes = 0 # show all data in the table

```

This is a preview of the datasets used in this analysis. 

```{python}
# loading the data
weapons = pd.read_csv('data/weapons_statistics.csv')
top_players = pd.read_csv('data/top_100_players.csv')
maps = pd.read_csv('data/maps_statistics.csv')
pro_players = pd.read_csv('data/csgo_professional_players.csv')
pro_games = pd.read_csv('data/csgo_professional_games.csv')
```

```{python}
# Cleaning the data: removing % and converting to float
# Cleaning Weapons
weapons["HS %"] = weapons["HS %"].str.replace("%", "").astype(float)
weapons["Chest %"] = weapons["Chest %"].str.replace("%", "").astype(float)
weapons["Leg %"] = weapons["Leg %"].str.replace("%", "").astype(float)
weapons["Total Kills"] = weapons["Total Kills"].str.replace(",", "").astype(int)

# Cleaning Maps
maps["T-Win %"] = maps["T-Win %"].str.replace("%", "").astype(float)
maps["CT-Win %"] = maps["CT-Win %"].str.replace("%", "").astype(float)
maps["Play Rate"] = maps["Play Rate"].str.replace("%", "").astype(float)

# Cleaning Pro Players
pro_players["headshot_percentage"] = pro_players["headshot_percentage"].str.replace("%", "").astype(float)
pro_players["team_win_percent_after_first_kill"] = pro_players["team_win_percent_after_first_kill"].str.replace("%", "").astype(float)
pro_players["first_kill_in_won_rounds"] = pro_players["first_kill_in_won_rounds"].str.replace("%", "").astype(float)
```

::: {.panel-tabset}

### Weapons

The weapons_statistics dataset provides insights into weapon performance in CS:GO. Metrics include Kill Per Round (KPR), Headshot Percentage (HS %), Chest %, Leg %, and Total Kills. Weapons like AK-47, M4A1-S, and AWP are analyzed, offering valuable information for strategic gameplay. Weapon Statistics:

```{python}
# Show weapons table
show(weapons)
```

### Players (Casual)

The competitive_players_statistics dataset focuses on individual player performance in competitive CS:GO. Variables include Rank, Name, CS Rating, Region, Wins, Ties, and Losses. Notable players like sH0oRuk YouTube, TTpo100Razeb Daniel, and REZPEZT™ are featured, with their respective performance metrics.

```{python}
# Show Top Normal Players table
show(top_players)
```

### Maps

The maps_statistics dataset offers detailed statistics on various CS:GO maps. Key metrics include Play Rate, T-Win %, CT-Win %, and the total number of Matches. Maps such as Dust II, Mirage, and Inferno are featured, showcasing their popularity and performance metrics.

```{python}
# Show Maps table
show(maps)
```

### Players (Pro)

The csgo_professional_players dataset provides comprehensive statistics on professional CS:GO players. Key metrics include Player ID, Nickname, Real Name, Age, Country, Current Team, Total Kills, Total Deaths, and Headshot Percentage. Notable players like s1mple, ZywOo, and device are featured, with their respective performance metrics.

<details>
<summary> Columns (41) </summary>

| Column | Description   |
|------|------------------------------------|
| `player_id`                        | Player's ID on HLTV                                                |
| `nickname`                         | In-game name of the player                                         |
| `real_name`                        | Name of the player                                                 |
| `age`                              | Age of the player                                                  |
| `country`                          | Country of the player                                              |
| `current_team`                     | Current team of the player                                         |
| `teams`                            | All teams of the player, including previous and current teams      |
| `total_kills`                      | Total in-game kills by the player                                  |
| `total_deaths`                     | Total in-game deaths of the player                                 |
| `headshot_percentage`              | Headshot percentage of the player                                  |
| `damage_per_round`                 | Damage inflicted per round by the player                           |
| `grenade_dmg_per_round`            | Damage inflicted per round with grenade by the player              |
| `maps_played`                      | Total maps played by the player                                    |
| `rounds_played`                    | Total rounds played by the player                                  |
| `kills_per_death`                  | Kill(s) per death ratio of the player                              |
| `kills_per_round`                  | Kill(s) per round ratio of the player                              |
| `assists_per_round`                | Assists per round by the player                                    |
| `deaths_per_round`                 | Deaths per round of the player                                     |
| `saved_teammates_per_round`        | Average number of teammates saved per round by the player          |
| `saved_by_teammate_per_round`      | Average number of times the player was saved by the teammates      |
| `rounds_with_kills`                | Number of rounds in which the player got a kill                    |
| `kill_to_death_diff`               | Kill-death difference                                              |
| `total_opening_kills`              | Total number of opening kills by the player                        |
| `total_opening_deaths`             | Total number of opening deaths of the player                       |
| `opening_kill_ratio`               | Opening kill ratio of the player                                   |
| `opening_kill_rating`              | Opening kill rating of the player                                  |
| `team_win_percent_after_first_kill` | Win percentage of the team after first kill by the player          |
| `first_kill_in_won_rounds`         | Percentage of rounds won in which the player got first kill        |
| `0_kill_rounds`                    | Number of rounds with 0 kills by the player                        |
| `1_kill_rounds`                    | Number of rounds with 1 kill by the player                         |
| `2_kill_rounds`                    | Number of rounds with 2 kills by the player                        |
| `3_kill_rounds`                    | Number of rounds with 3 kills by the player                        |
| `4_kill_rounds`                    | Number of rounds with 4 kills by the player                        |
| `5_kill_rounds`                    | Number of rounds with 5 kills by the player                        |
| `rifle_kills`                      | Number of rifle kills by the player                                |
| `sniper_kills`                     | Number of sniper kills by the player                               |
| `smg_kills`                        | Number of SMG kills by the player                                  |
| `pistol_kills`                     | Number of pistol kills by the player                               |
| `grenade_kills`                    | Number of grenade kills by the player                              |
| `other_kills`                      | Number of other weapon kills by the player                         |
| `rating`                           | Rating of the player with 1.00 being the average                   |

</details>

```{python}
# Show Professional Players table
show(pro_players)
```

### Pro Matches

It is provided crucial information about the teams at the time of the match, such as the winner, team names, match score, head to head past victories and world ranks. Also, there is complete statistics from player1 to player5 of each competing team over a three-month period before the match day. Players are ordered from one to five inside their teams according to their rating(e.g. best rating would be the player1 and worse would be the player5).

<details>
<summary> Columns </summary>

| Feature       | **Description**  |
|----------|-----------------------------|
| `world rank`                 | Team world rank at the match date according to hltv.org rank.                                                                                                      |
| `points`                     | Number of points scored. It can be smaller than 5 if the match was a best of five game, e.g., t1_points = 3 and t2_points = 2, with t1 winning the match.           |
| `h2h win perc`               | Float value from 0 to 1 representing share of wins on past games against the other team. Will be 0.5 if there are no previous confrontations.                       |
| `player1 to player5 features`| Players are ordered from 1 to 5 according to their hltv.org rating (the best-rated player will always be considered player1).                                      |
| `rating`                     | Main metric of player quality.                                                                                                                                     |
| `impact`                     | Overall impact of the player on games (usually correlated with important and decisive kills).                                                                       |
| `kdr`                        | Total number of kills / total number of deaths.                                                                                                                    |
| `dmr`                        | Average damage per round.                                                                                                                                          |
| `kpr`                        | Average number of kills per round.                                                                                                                                 |
| `apr`                        | Average number of assists on teammates' kills per round.                                                                                                           |
| `dpr`                        | Average number of deaths per round.                                                                                                                                |
| `spr`                        | Average number of saved teammates per round.                                                                                                                       |
| `opk ratio`                  | Total opening kills on rounds / total opening deaths on rounds.                                                                                                    |
| `opk rating`                 | HLTV score on the player’s opening kills.                                                                                                                          |
| `wins perc after fk`         | Round conversion rate when the player gets the first kill of the round.                                                                                            |
| `fk perc in wins`            | Percentage of player first kills in won rounds.                                                                                                                    |
| `multikill perc`             | Share of rounds where the player contributed with two or more kills.                                                                                               |
| `rating at least one perc`   | Share of played matches where the player had at least 1.0 rating.                                                                                                  |
| `is sniper`                  | Boolean indicating if the player has the "awp" (sniper) as their first or second weapon with the most kills.                                                       |
| `clutch win perc`            | Conversion rate for the player in one vs. one situations.                                                                                                          |


</details>

```{python}
# Show Professional Matches table
show(pro_games)
```
:::

## Analysis

### Weapons Analysis

#### Total Kills by Weapon

```{python}
#total kills by weapon
fig = px.bar(weapons.sort_values(by='Total Kills', ascending=False), x='Weapon', y='Total Kills', title='Total Kills by Weapon', color='Weapon')
fig.show()
```

The bar chart above shows the total kills by weapon. The AK-47 and M4A1-S are the most popular weapons, with the AWP and M4A1 being the next most popular. 
AK-47 is the most popular weapon, doubling the second most popular weapon, the M4A1-S.

::: {.callout-note}
Weapon selection in CS2 are slightly different from Terrorist to Counter Terrorist. 

Weapons like AK-47, Glock-18 or SG 553 are T only, while M4A1-S, AUG or USP-S are CT only
:::

This means that for AK-47 to have so many kills, knowing that in a match half of the players are CT and half T, even the CT will pick up and use an AK-47 and use it if the have the chance, making it the most popular weapon on the game.


#### KPR (Kills per Round) by Weapon

```{python}
# KPR (Kills Per Round) by weapon
fig = px.bar(weapons.sort_values(by='KPR', ascending=False), x='Weapon', y='KPR', title='Kills Per Round (KPR) by Weapon', color='Weapon')
fig.show()
```

The figure above shows the average kills per round with each weapon. Here we can already start to think about **effectiveness** of a weapon (in the hands of the correct player). 

In average, a player with a G3SG1 will kill 1.9 enemies, with AWP 1.6, AUG 1.3 and AK-47 1.2. This decimal numbers can be described as percentage of health of an enemy, so 1.9 is one kill and 90% of health of another player (or distributed among other players).

::: {.callout-note}
The first 2 weapons are sniper rifles and the third has a scope, so they are used for long range kills. The AK-47 is a rifle, used for medium range kills.
:::

#### Accuracy by Weapon

On the next chart we can see the accuracy of each weapon. Here "*accuracy*" is the sum of the percentage of headshots, chest shots and leg shots. (Ordered Descending)

```{python}
# stacked bar chart with HS %, Chest % and Leg % using plotly Y = weapons
fig = px.bar(weapons, x='Weapon', y=['HS %', 'Chest %', 'Leg %'], title='Headshot, Chest and Leg Percentage by Weapon', barmode='stack')
fig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'})
fig.show()
```

We can see that **accuracy** totals around 90% for all weapons, but when we look at the individual parts, these are not distributed equally. 

- **Headshots:** Desert Eagle is the weapon with the highest headshot percentage, followed by USP-S and Famas. USP-S is a CT only weapon and it is given at the start of the round, so most CT players have it most of the time.
Desert Eagle, on the other hand, is the most expensive pistol in the game, so it is used by players that are confident in their aim. 

- **Chest:**Numbers are more evenly distributed around 60%, nevertheless, the AWP has the highest percentage, followed by 5 pistols. AWP is because is a one hit kill weapon, so players aim for the chest to guarantee the kill. For the pistols, they are used in close range where enemies are moving, so it is harder to aim for the head.

- **Leg:** Numbers are similar to Headshots. Here we can see that the weapons with the highest leg percentage are SMGs and shotguns. These weapons are used in close range, where it is easier to hit the legs of the enemy. Also the spray pattern of these weapons is more random, so they tend to be aimed lower.

### Maps Analysis

The next analysis about maps will show the win percentage of each side as well as the play rate of each map.

#### Play Rate by Map

```{python}
# rewrite play rate using a different plot type
fig = px.pie(maps, values='Play Rate', names='Map', title='Play Rate (%) by Map')
fig.update_traces(textposition='inside', textinfo='value+label',texttemplate='%{value:.2f}%')
# remove legend
fig.update_layout(showlegend=False)
# increase size
fig.update_layout(height=500)
# increase size of the plot relative the figure
fig.update_layout(margin=dict(l=0, r=0, b=20))
# increase font size of the text
fig.update_layout(font_size=16)

fig.show()

```

In the pie chart above we can see the play rate of each map. Dust II is the most popular map, followed by Mirage and Inferno. 

Dust II is the most popular map in Counter Strike history, it is a simple map with 2 bomb sites and 3 main paths to reach them. It is a map that is easy to learn and play, so it is the most played map in the game. 

This 3 maps compute more than 50% of the total play rate, so they are the most played maps in the game. The reason goes in 2 ways, they are the most played in the competitive scene and tournaments, so players want to practice them. Also, they are the most played in the casual scene, so players are more familiar with them. Which scene is the cause of this is hard to know, but it is a feedback loop that makes them the most played maps.

#### Win Percentage by Map

```{python}
# win percentage by map
fig = px.bar(maps, x='Map', y=['T-Win %', 'CT-Win %'], title='Win Percentage by Map', barmode='group')
# category order by closest to 50% win rate
fig.update_layout(xaxis={'categoryorder':'array', 'categoryarray':maps.sort_values(by='T-Win %', key=lambda x: abs(x-50))['Map']})
# highlight the 50% win rate
fig.add_hline(y=50, line_color="grey", line_dash="dot")
# highlight maps (mirage, dust2 and inferno) dont use add_vrect
fig.add_shape(type="rect", x0=-0.5, x1=2.5, y0=0, y1=100, fillcolor="rgba(255, 130, 0, 0.69)", layer="below", line_width=0)
fig.show()
```

In the bar chart above we can see the win percentage of each side by map. The win rate is close to 50% for most maps, with the exception of Italy, with a unbalance of almost 16% in favor of the CT side.

We also can see that the most played maps (Dust II, Mirage and Inferno) have a win rate close to 50%, so they are balanced maps. This is important in a competitive game, as it makes the game fair for both teams. This also matches with Italy, the most unbalanced map, being the least played map.

The game also feeds back on this, as now maps are bundled in map packages, so players can choose to play one package, usually being the competitive one with the most balanced maps and the other packages with the less popular maps as shown in the chart.

### Top Players (Casual) Analysis

In this section we will analyze the top players by wins, losses and ties.
The complete formula for how CS rates players is not public, but it is known that it takes into account the player's performance in the game, the player's team performance, and the player's opponents' performance, as well as the win or lose of the match.
That means that even if the match is a tie or a loss, the player can still have a good CS rating if they performed well in the game.

Other miscellaneous things are taken into account, suck as the rank of other players, or if a player leaves the match giving disadvantage to a team or if a player flagged as a cheater.

#### Top Players by Wins, Losses

```{python}
import plotly.graph_objects as go
# top players by win, loses and ties using plotly in the same plot scatter
fig = px.scatter(top_players, x='Wins', y='Losses', hover_name='Name', title='Top Players by Wins and Losses')
# add a regression line to the plot
abline = np.polyfit(top_players['Wins'], top_players['Losses'], 1)
fig.add_traces(go.Scatter(x=top_players['Wins'], y=abline[0]*top_players['Wins']+abline[1], mode='lines', name='Correlation of Wins and Losses'))

# legend on the top left
fig.update_layout(legend=dict(x=0, y=1))
fig.show()
print(f"The correlation between Wins and Losses is {abline}, ")
# interpret the regression line
```

The scatter plot above shows the top players by wins and losses. The regression line shows a positive correlation between wins and losses, meaning that players with more wins tend to have more losses. This is expected, as the more games a player plays, the more likely they are to win and lose games. Also, the more wins a player has, the more likely they are to be matched against better players, increasing the chances of losing games.

The result `[0.57897954, -20.36887699]` from the `np.polyfit` function represents a linear relationship between wins and losses for the top players:

- **Slope (0.579)**: For each additional win, losses are predicted to increase by approximately 0.579. This suggests a moderately positive correlation between wins and losses, meaning as players win more, they tend to accumulate more losses as well.
- **Intercept (-20.37)**: The model predicts about -20 losses when the number of wins is zero. While this doesn't make sense practically, it helps define the linear trend.

The equation of the line would be:
$$ \text{Losses} = 0.579 \times \text{Wins} - 20.37 $$

In summary, the model indicates that as a player's number of wins increases, so do their losses at a fairly consistent rate.

#### Cluster Map of Top Players by Wins and Losses

```{python}
# Cluster map of the top players by wins and losses using k-means clustering
from sklearn.cluster import KMeans
# create a new dataframe with only wins and losses
top_players_wl = top_players[['Wins', 'Losses']].copy()
# create a k-means clustering model with 3 clusters
kmeans = KMeans(n_clusters=3)
# fit the model to the data
kmeans.fit(top_players_wl)
# add the cluster labels to the dataframe
top_players_wl['Cluster'] = kmeans.labels_
# create a scatter plot of the data with the clusters colored
fig = px.scatter(top_players_wl, x='Wins', y='Losses', color='Cluster', title='Top Players by Wins and Losses (Clustered)', color_continuous_scale='jet')
fig.show()
```

The cluster map above shows the top players by wins and losses, clustered into three groups. The clusters are based on the players' performance in terms of wins and losses. The clustering algorithm groups players with similar win and loss patterns together, providing insights into player performance and behavior.

This 3 groups could be interpreted as:

- **Cluster 1 (Green)**: Players with low wins and almost 0 losses. These players are natural talents or experienced players with a new account. Probably play on a team of 5 players and have a good team.
- **Cluster 0 (Blue)**: Players with a balanced number of wins and losses. These players are consistent performers who win and lose games at a similar rate. Likely play solo or with a team of 2 or 3 players.
- **Cluster 2 (Red)**: Players with high wins and losses. These players are high-risk, high-reward players who play a lot and prioritize quantity over quality. Probably play solo a lot even if they have a team.

::: {.callout-note}
##### Importance of Playing Solo or With a Team
Playing solo or with a team can affect the win rate of a player. Playing solo can be harder as the player has less control over the game because of playing with random players, while playing with a team can be easier as the player can coordinate with their teammates.
:::

### Professional Players Analysis

The dataset of professional players contains comprehensive statistics on professional CS:GO players, including player ID, nickname, real name, age, country, current team, total kills, total deaths, headshot percentage, and more.

#### Player Age Distribution

```{python}
# player age distribution
fig = px.histogram(pro_players, x='age', title='Player Age Distribution', nbins=20)
fig.show()
```

Here we can see the age distribution of professional players. The majority of players are in their mid-20s, with the peak age being around 24-25 years old. This is expected, as players in their mid-20s are typically at their peak performance in terms of reaction time and skill level.

The distribution is slightly skewed to the right, with fewer players in their early 20s and stopping abruptly at the age of 17. This could be due to the age restrictions in professional CS:GO tournaments, where players under the age of 18 are not allowed to compete.

On the other hand, there are slightly more players in their late 20s and early 30s, which could be due to the experience and maturity that comes with age. These players may have been playing CS:GO for a longer time and have more experience in competitive play.

#### Player Country Map 

```{python}
# player country map
pro_players['country_count'] = pro_players['country'].map(pro_players['country'].value_counts())
fig = px.choropleth(pro_players, 
                    locations='country', 
                    locationmode='country names', 
                    color='country_count', 
                    title='Player Country Map', 
                    color_continuous_scale='Viridis', 
                    range_color=(0, pro_players['country_count'].max()))
fig.show()
```

Here we have an interactive map of the count of professional players by country. The map shows the distribution of professional players around the world, with the United States, Russia, Sweden, Poland, Brazil and Australia being the countries with the most professional players. 
Keeping in mind the total population, is remarkable how many players Sweden and Poland have in the professional scene.

#### Kill-Death Ratio

```{python}
# key player metrics
fig = px.scatter(pro_players, x='total_kills', y='total_deaths', title='Key Player Metrics')
# add a regression line to the plot
abline = np.polyfit(pro_players['total_kills'], pro_players['total_deaths'], 1)
fig.add_traces(go.Scatter(x=pro_players['total_kills'], y=abline[0]*pro_players['total_kills']+abline[1], mode='lines', name='Kill-Death Ratio'))
fig.show()
print(f"The correlation between Total Kills and Total Deaths is {abline}, ")
print(f"The average Kill-Death Ratio is {pro_players.kills_per_death.mean()}")
```

The scatter plot above shows the key player metrics of total kills and total deaths. The regression line shows a positive correlation between total kills and total deaths, meaning that players with more kills tend to have more deaths. This is expected, as the more kills a player gets, the more likely they are to die in the game.

Furthermore, we can see a well defined line, meaning that the ratio of kills to deaths is consistent across all players in the professional scene. This is important, as it shows that players are playing at a similar level and are evenly matched in terms of skill and performance. 

It could also infer that for a casual player to become a professional player, they need to have a good kill-death ratio, around **1.04**. Still other skills including team play, communication, strategy and experience are needed to become a professional player.

#### Headshot Percentage and kill-death ratio

```{python}
# headshot percentage and kill-death ratio
fig = px.scatter(pro_players, x='headshot_percentage', y='kills_per_death', title='Headshot Percentage and Kill-Death Ratio')
# add a regression line to the plot
abline = np.polyfit(pro_players['headshot_percentage'], pro_players['kills_per_death'], 1)
fig.add_traces(go.Scatter(x=pro_players['headshot_percentage'], y=abline[0]*pro_players['headshot_percentage']+abline[1], mode='lines', name='Headshot Percentage and Kill-Death Ratio'))
# move legend to below the plot
fig.update_layout(legend=dict(yanchor="bottom", y=0.01, xanchor="left", x=0.01))
fig.show()
```

::: {.callout-note}
##### Why Headshots?
Headshots are important in CS2 because they deal more damage than body shots, and they are more likely to kill the enemy in one shot. This is important in a game where every shot counts, and players need to be accurate and precise to win.
:::

The scatter plot above shows the headshot percentage and kill-death ratio of professional players. The headshot percentage is the percentage of kills that are headshots, while the kill-death ratio is the total number of kills divided by the total number of deaths.

The regression line shows a small negative correlation between headshot percentage and kill-death ratio, meaning that players with a higher headshot percentage tend to have a lower kill-death ratio. This is expected, as players who go for headshots are more likely to miss shots and die more often.

```{python}
# create a column called role and if sniper kills > rifle kills, then sniper, else rifle
pro_players['role'] = np.where(pro_players['sniper_kills'] > pro_players['rifle_kills'], 'Sniper', 'Rifle')
# add the role column as color for the scatter plot
fig = px.scatter(pro_players, x='headshot_percentage', y='kills_per_death', color='role', title='Headshot Percentage and Kill-Death Ratio by Role')
fig.show() 
```

Not only that, but sniper rifles inflict the highest damage, and kill in 2 shots to the body. Specially the AWP, which is a one shot kill weapon, players can then aim for any part of the body to kill the enemy, so aiming for the head, which is a smaller target and could be missed is not the best strategy. This could mean that most sniper players, which also tend to play more defensively and from distance, could have a higher kill-death ratio and a lower headshot percentage, while players that play more aggressively and with rifles could have a higher headshot percentage and a lower kill-death ratio.

```{python}
# count and plot the appearance of each team in team and current team columns
current_team_count = pro_players['current_team'].value_counts()
# separate teams by commas, then count the number of teams
teams = pro_players['teams'].str.split(',').explode().str.strip()
teams_count = teams.value_counts()
#sum both teams and current teams
total_teams = current_team_count.add(teams_count, fill_value=0)
# order teams by count
total_teams = total_teams.sort_values(ascending=False)
# plot the teams
fig = px.bar(total_teams, title='Team Players', labels={'index':'Team', 'value':'Count'})
fig.show()

# plot top 10 teams
fig = px.bar(total_teams.head(10), title='Top 10 Teams', labels={'index':'Team', 'value':'Count'})
fig.show()
```

::: {.callout-note}
This is a note callout.
:::

::: {.callout-warning}
This is a warning callout.
:::

::: {.callout-important}
This is an important callout.
:::

::: {.callout-tip}
This is a tip callout.
:::

::: {.callout-caution}
This is a caution callout.
:::

